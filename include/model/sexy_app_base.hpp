#pragma once

#include "buffer.hpp"
#include "crit_sect.hpp"
#include "dd_interface.hpp"
#include "ratio.hpp"
#include "resource_manager.hpp"
#include "sound_manager.hpp"
#include "widget_manager.hpp"

namespace pvz {
    struct SexyAppBase {
        UNKNOWN_BYTES(8);
        uint32_t mRandSeed;
        IncompatibleBasicString mCompanyName;
        IncompatibleBasicString mFullCompanyName;
        IncompatibleBasicString mProdName;
        IncompatibleBasicString mTitle;
        IncompatibleBasicString mRegKey;
        IncompatibleBasicString mChangeDirTo;
        int32_t mRelaxUpdateBacklogCount;
        int32_t mPreferredX;
        int32_t mPreferredY;
        int32_t mWidth;
        int32_t mHeight;
        int32_t mFullscreenBits;
        UNKNOWN_BYTES(4);
        double mMusicVolume;
        double mSfxVolume;
        double mDemoMusicVolume;
        double mDemoSfxVolume;
        bool mNoSoundNeeded;
        bool mWantFMod;
        bool mCmdLineParsed;
        bool mSkipSignatureChecks;
        bool mStandardWordWrap;
        bool mbAllowExtendedChars;
        void *mMutex;
        bool mOnlyAllowOneCopyToRun;
        uint32_t mNotifyGameMessage;
        CritSect mCritSect;
        bool mBetaValidate;
        unsigned char mAdd8BitMaxTable[512];
        WidgetManager *mWidgetManager;
        IncompatibleMap mDialogMap;
        IncompatibleList mDialogList;
        uint32_t mPrimaryThreadId;
        bool mSEHOccured;
        bool mShutdown;
        bool mExitToTop;
        bool mIsWindowed;
        bool mIsPhysWindowed;
        bool mFullScreenWindow;
        bool mForceFullscreen;
        bool mForceWindowed;
        bool mInitialized;
        bool mProcessInTimer;
        uint32_t mTimeLoaded;
        HWND__ *mHWnd;
        HWND__ *mInvisHWnd;
        bool mIsScreenSaver;
        bool mAllowMonitorPowersave;
        IncompatibleList mDeferredMessages;
        bool mNoDefer;
        bool mFullScreenPageFlip;
        bool mTabletPC;
        DDInterface *mDDInterface;
        bool mAlphaDisabled;
        MusicInterface *mMusicInterface;
        bool mReadFromRegistry;
        IncompatibleBasicString mRegisterLink;
        IncompatibleBasicString mProductVersion;
        char mCursorImages[52];
        HICON__ *mOverrideCursor;
        bool mIsOpeningURL;
        bool mShutdownOnURLOpen;
        IncompatibleBasicString mOpeningURL;
        uint32_t mOpeningURLTime;
        uint32_t mLastTimerTime;
        uint32_t mLastBigDelayTime;
        double mUnmutedMusicVolume;
        double mUnmutedSfxVolume;
        int32_t mMuteCount;
        int32_t mAutoMuteCount;
        bool mDemoMute;
        bool mMuteOnLostFocus;
        IncompatibleSet mMemoryImageSet;
        IncompatibleMap mSharedImageMap;
        bool mCleanupSharedImages;
        int32_t mNonDrawCount;
        int32_t mFrameTime;
        bool mIsDrawing;
        bool mLastDrawWasEmpty;
        bool mHasPendingDraw;
        UNKNOWN_BYTES(5);
        double mPendingUpdatesAcc;
        double mUpdateFTimeAcc;
        uint32_t mLastTimeCheck;
        uint32_t mLastTime;
        uint32_t mLastUserInputTick;
        int32_t mSleepCount;
        int32_t mDrawCount;
        int32_t mUpdateCount;
        int32_t mUpdateAppState;
        int32_t mUpdateAppDepth;
        double mUpdateMultiplier;
        bool mPaused;
        int32_t mFastForwardToUpdateNum;
        bool mFastForwardToMarker;
        bool mFastForwardStep;
        uint32_t mLastDrawTick;
        uint32_t mNextDrawTick;
        int32_t mStepMode;
        int32_t mCursorNum;
        SoundManager *mSoundManager;
        HICON__ *mHandCursor;
        HICON__ *mDraggingCursor;
        IncompatibleList mSafeDeleteList;
        bool mMouseIn;
        bool mRunning;
        bool mActive;
        bool mMinimized;
        bool mPhysMinimized;
        bool mIsDisabled;
        bool mHasFocus;
        int32_t mDrawTime;
        uint32_t mFPSStartTick;
        int32_t mFPSFlipCount;
        int32_t mFPSDirtyCount;
        int32_t mFPSTime;
        int32_t mFPSCount;
        bool mShowFPS;
        int32_t mShowFPSMode;
        int32_t mScreenBltTime;
        bool mAutoStartLoadingThread;
        bool mLoadingThreadStarted;
        bool mLoadingThreadCompleted;
        bool mLoaded;
        bool mYieldMainThread;
        bool mLoadingFailed;
        bool mCursorThreadRunning;
        bool mSysCursor;
        bool mCustomCursorsEnabled;
        bool mCustomCursorDirty;
        bool mLastShutdownWasGraceful;
        bool mIsWideWindow;
        bool mWriteToSexyCache;
        bool mSexyCacheBuffers;
        int32_t mNumLoadingThreadTasks;
        int32_t mCompletedLoadingThreadTasks;
        bool mRecordingDemoBuffer;
        bool mPlayingDemoBuffer;
        bool mManualShutdown;
        IncompatibleBasicString mDemoPrefix;
        IncompatibleBasicString mDemoFileName;
        Buffer mDemoBuffer;
        int32_t mDemoLength;
        int32_t mLastDemoMouseX;
        int32_t mLastDemoMouseY;
        int32_t mLastDemoUpdateCnt;
        bool mDemoNeedsCommand;
        bool mDemoIsShortCmd;
        int32_t mDemoCmdNum;
        int32_t mDemoCmdOrder;
        int32_t mDemoCmdBitPos;
        bool mDemoLoadingComplete;
        IncompatibleMap mHandleToIntMap;
        int32_t mCurHandleNum;
        IncompatibleList mDemoMarkerList;
        bool mDebugKeysEnabled;
        bool mEnableMaximizeButton;
        bool mCtrlDown;
        bool mAltDown;
        bool mAllowAltEnter;
        int32_t mSyncRefreshRate;
        bool mVSyncUpdates;
        bool mVSyncBroken;
        int32_t mVSyncBrokenCount;
        uint32_t mVSyncBrokenTestStartTick;
        uint32_t mVSyncBrokenTestUpdates;
        bool mWaitForVSync;
        bool mSoftVSyncWait;
        bool mUserChanged3DSetting;
        bool mAutoEnable3D;
        bool mTest3D;
        uint32_t mMinVidMemory3D;
        uint32_t mRecommendedVidMemory3D;
        bool mWidescreenAware;
        bool mWidescreenTranslate;
        TRect<int32_t> mScreenBounds;
        bool mEnableWindowAspect;
        Ratio mWindowAspect;
        IncompatibleMap mStringProperties;
        IncompatibleMap mBoolProperties;
        IncompatibleMap mIntProperties;
        IncompatibleMap mDoubleProperties;
        IncompatibleMap mStringVectorProperties;
        ResourceManager *mResourceManager;
        int32_t mOldWndProc;
        UNKNOWN_BYTES(4);
    };
} // namespace pvz
